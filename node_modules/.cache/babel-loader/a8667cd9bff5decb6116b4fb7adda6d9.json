{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjjan\\\\Documents\\\\GitHub\\\\Game-Night-Calculator\\\\src\\\\components\\\\RainierPlayTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\nimport RainierHandInput from \"./RainierHandInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RainierPlayTable = ({\n  players,\n  rounds,\n  onGameOver\n}) => {\n  _s();\n\n  // Track history of hands\n  const [handHistory, setHandHistory] = useState([]); // Track the round number of the current hand\n\n  let [currHandNum, setCurrHandNum] = useState(0); // Track current dealer; indexes players list to set isDealer boolean\n\n  let [currDealer, setCurrDealer] = useState(0); // Store the results of the current hand\n\n  const [currHand, setCurrHand] = useState(populateHands()); // Populate currHand based on number players and their IDs\n\n  function populateHands() {\n    let hands = [];\n    players.forEach(player => hands.push({\n      handNum: currHandNum,\n      playerID: player.id,\n      bet: 0,\n      status: null\n    }));\n    return hands;\n  } // Track number of rounds\n\n\n  let totalRounds;\n\n  if (players) {\n    totalRounds = rounds * players.length;\n  } // Updates totals with previous current hand\n\n\n  const submitHand = () => {\n    // Check to make sure all players have submitted\n    for (let i = 0; i < currHand.length; i++) {\n      if (!currHand[i].bet) {\n        alert(\"Please make sure all player bets are submitted!\");\n        return;\n      }\n    }\n\n    setCurrHandNum(currHandNum += 1);\n\n    if (currHandNum % rounds === 0) {\n      // find current dealer and set to false\n      let index = players.findIndex(({\n        isDealer\n      }) => isDealer);\n      players[index].isDealer = false; // increment current dealer index and set next player isDealer to true\n\n      setCurrDealer(currDealer += 1);\n\n      if (currDealer >= players.length) {\n        onGameOver();\n        const newHand = calculateHand(currHand);\n        setHandHistory([...handHistory, newHand]);\n        return;\n      }\n\n      players[index + 1].isDealer = true;\n    }\n\n    const newHand = calculateHand(currHand);\n    setHandHistory([...handHistory, newHand]);\n    setCurrHand(populateHands());\n  }; // Calculates payouts for a round\n\n\n  const calculateHand = hand => {\n    let newHand = {\n      handNum: currHandNum,\n      results: []\n    };\n    let results = [];\n    let dealerWin = 0;\n    hand.map(player => {\n      if (player.status === \"win\") {\n        results.push({\n          playerID: player.playerID,\n          result: player.bet,\n          status: player.status\n        });\n      } else if (player.status === \"lose\") {\n        results.push({\n          playerID: player.playerID,\n          result: player.bet * -1,\n          status: player.status\n        });\n      } else if (player.status === \"push\") {\n        results.push({\n          playerID: player.playerID,\n          result: 0,\n          status: player.status\n        });\n      } else {\n        results.push({\n          playerID: player.playerID,\n          result: 0,\n          status: player.status\n        });\n      }\n    });\n    results.map(result => dealerWin += result.result * -1);\n    let index = hand.findIndex(({\n      status\n    }) => status === \"dealer\");\n    results[index].result = dealerWin; // update player state to reflect new earnings\n\n    players.map(player => {\n      results.map(result => {\n        if (player.id === result.playerID) {\n          player.total += result.result;\n        }\n      });\n    }); // update newhand with results\n\n    newHand.results = results;\n    return newHand;\n  }; // Adds a player's bet and status to the current hand; updates player's hand if reentered\n\n\n  const setBet = ({\n    playerID,\n    value,\n    status\n  }) => {\n    currHand[playerID - 1].handNum = currHandNum;\n    currHand[playerID - 1].bet = value;\n    currHand[playerID - 1].status = status;\n    setCurrHand([...currHand]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Each player deals \", rounds, \" hand\", rounds > 1 ? \"s\" : \"\", \" for a total of \", totalRounds, \" hands. \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" NOTE: If you split, please enter your *net* bet, otherwise enter total amount bet as a positive integer. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" (ex: Player bets $5 and splits their hand; one hand busts and the other pushes. Net loss: $5) \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        my: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          width: \"20%\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Playing Hand #\", currHandNum + 1, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: submitHand,\n            children: \" Submit Hand \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n          children: /*#__PURE__*/_jsxDEV(RainierHandInput, {\n            handNum: currHandNum,\n            playerID: player.id,\n            setBet: setBet,\n            isDealer: player.isDealer,\n            playerName: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: player.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [/*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              width: \"20%\",\n              children: \" Total: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: player.total >= 0 ? \"#C8F79E\" : \"#F89693\"\n              },\n              children: [\" $\", player.total, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), handHistory.map(round => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: [\" Round \", round.handNum, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 33\n            }, this), round.results.map(result => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [\" $\", result.result, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RainierPlayTable, \"bCKzNG3+yhKK8b7SKLXmIaGa0iM=\");\n\n_c = RainierPlayTable;\nexport default RainierPlayTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"RainierPlayTable\");","map":{"version":3,"sources":["C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/src/components/RainierPlayTable.js"],"names":["useState","Button","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","RainierHandInput","RainierPlayTable","players","rounds","onGameOver","handHistory","setHandHistory","currHandNum","setCurrHandNum","currDealer","setCurrDealer","currHand","setCurrHand","populateHands","hands","forEach","player","push","handNum","playerID","id","bet","status","totalRounds","length","submitHand","i","alert","index","findIndex","isDealer","newHand","calculateHand","hand","results","dealerWin","map","result","total","setBet","value","my","name","backgroundColor","round"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\r\nimport RainierHandInput from \"./RainierHandInput\"\r\n\r\nconst RainierPlayTable = ({ players, rounds, onGameOver }) => {\r\n    // Track history of hands\r\n    const [handHistory, setHandHistory] = useState([])\r\n\r\n    // Track the round number of the current hand\r\n    let [currHandNum, setCurrHandNum] = useState(0)\r\n\r\n    // Track current dealer; indexes players list to set isDealer boolean\r\n    let [currDealer, setCurrDealer] = useState(0)\r\n\r\n    // Store the results of the current hand\r\n    const [currHand, setCurrHand] = useState(populateHands())\r\n\r\n    // Populate currHand based on number players and their IDs\r\n    function populateHands() {\r\n        let hands = []\r\n        players.forEach(player =>\r\n            hands.push({ handNum: currHandNum, playerID: player.id, bet: 0, status: null }))\r\n        return hands\r\n    }\r\n\r\n    // Track number of rounds\r\n    let totalRounds\r\n    if (players) {\r\n        totalRounds = rounds * players.length\r\n    }\r\n\r\n    // Updates totals with previous current hand\r\n    const submitHand = () => {\r\n        // Check to make sure all players have submitted\r\n        for (let i = 0; i < currHand.length; i++) {\r\n            if (!currHand[i].bet) {\r\n                alert(\"Please make sure all player bets are submitted!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        setCurrHandNum(currHandNum += 1)\r\n\r\n        if (currHandNum % rounds === 0) {\r\n            // find current dealer and set to false\r\n            let index = players.findIndex(({ isDealer }) => isDealer)\r\n            players[index].isDealer = false\r\n            // increment current dealer index and set next player isDealer to true\r\n            setCurrDealer(currDealer += 1)\r\n\r\n            if (currDealer >= players.length) {\r\n                onGameOver()\r\n                const newHand = calculateHand(currHand)\r\n                setHandHistory([...handHistory, newHand])\r\n                return\r\n            }\r\n\r\n            players[index + 1].isDealer = true\r\n        }\r\n\r\n        const newHand = calculateHand(currHand)\r\n        setHandHistory([...handHistory, newHand])\r\n        setCurrHand(populateHands())\r\n    }\r\n\r\n    // Calculates payouts for a round\r\n    const calculateHand = (hand) => {\r\n        let newHand = { handNum: currHandNum, results: [] }\r\n        let results = []\r\n        let dealerWin = 0\r\n\r\n        hand.map(player => {\r\n            if (player.status === \"win\") {\r\n                results.push({ playerID: player.playerID, result: player.bet, status: player.status })\r\n            } else if (player.status === \"lose\") {\r\n                results.push({ playerID: player.playerID, result: player.bet * -1, status: player.status })\r\n            } else if (player.status === \"push\") {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            } else {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            }\r\n        })\r\n\r\n        results.map(result => (\r\n            dealerWin += result.result * -1\r\n        ))\r\n\r\n        let index = hand.findIndex(({ status }) => status === \"dealer\")\r\n        results[index].result = dealerWin\r\n\r\n        // update player state to reflect new earnings\r\n        players.map(player => {\r\n            results.map(result => {\r\n                if (player.id === result.playerID) {\r\n                    player.total += result.result\r\n                }\r\n            })\r\n        })\r\n\r\n        // update newhand with results\r\n        newHand.results = results\r\n        return newHand\r\n    }\r\n\r\n    // Adds a player's bet and status to the current hand; updates player's hand if reentered\r\n    const setBet = ({ playerID, value, status }) => {\r\n\r\n        currHand[playerID - 1].handNum = currHandNum\r\n        currHand[playerID - 1].bet = value\r\n        currHand[playerID - 1].status = status\r\n\r\n        setCurrHand([...currHand])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p> Each player deals {rounds} hand{(rounds > 1) ? \"s\" : \"\"} for a total of {totalRounds} hands. </p>\r\n            <p> NOTE: If you split, please enter your *net* bet, otherwise enter total amount bet as a positive integer. </p>\r\n            <p> (ex: Player bets $5 and splits their hand; one hand busts and the other pushes. Net loss: $5) </p>\r\n\r\n            <TableContainer sx={{ my: 2 }}>\r\n                {/* Player Input */}\r\n                <TableRow>\r\n                    <TableCell width=\"20%\">\r\n                        <Grid>\r\n                            <h4>Playing Hand #{currHandNum + 1} </h4>\r\n                        </Grid>\r\n                        <Button variant=\"contained\" onClick={submitHand}> Submit Hand </Button>\r\n                    </TableCell>\r\n                    {players.map((player) => (\r\n                        <TableCell>\r\n                            <RainierHandInput handNum={currHandNum} playerID={player.id} setBet={setBet} isDealer={player.isDealer} playerName={player.name}/>\r\n                        </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n                <Table>\r\n                    {/* Header with player names */}\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell>{player.name}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/* Player Totals Row */}\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n\r\n                        {/* Hand history */}\r\n                        {handHistory.map((round) => (\r\n                            <TableRow>\r\n                                <TableCell> Round {round.handNum} </TableCell>\r\n                                {round.results.map((result) => (\r\n                                    <TableCell> ${result.result} </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RainierPlayTable\r\n"]},"metadata":{},"sourceType":"module"}