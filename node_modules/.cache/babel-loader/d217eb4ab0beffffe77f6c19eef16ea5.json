{"ast":null,"code":"import _toConsumableArray from\"C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{Button,Grid,Table,TableBody,TableCell,TableContainer,TableHead,TableRow}from\"@mui/material\";import RainierHandInput from\"./RainierHandInput\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var RainierPlayTable=function RainierPlayTable(_ref){var players=_ref.players,rounds=_ref.rounds,onGameOver=_ref.onGameOver;// Track history of hands\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),handHistory=_useState2[0],setHandHistory=_useState2[1];// Track the round number of the current hand\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),currHandNum=_useState4[0],setCurrHandNum=_useState4[1];// Track current dealer; indexes players list to set isDealer boolean\nvar _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),currDealer=_useState6[0],setCurrDealer=_useState6[1];// Store the results of the current hand\nvar _useState7=useState(populateHands()),_useState8=_slicedToArray(_useState7,2),currHand=_useState8[0],setCurrHand=_useState8[1];// Populate currHand based on number players and their IDs\nfunction populateHands(){var hands=[];players.forEach(function(player){return hands.push({handNum:currHandNum,playerID:player.id,bet:0,status:null});});return hands;}// Track number of rounds\nvar totalRounds;if(players){totalRounds=rounds*players.length;}// Updates totals with previous current hand\nvar submitHand=function submitHand(){// Check to make sure all players have submitted\nfor(var i=0;i<currHand.length;i++){if(!currHand[i].bet){alert(\"Please make sure all player bets are submitted!\");return;}}setCurrHandNum(currHandNum+=1);if(currHandNum%rounds===0){// find current dealer and set to false\nvar index=players.findIndex(function(_ref2){var isDealer=_ref2.isDealer;return isDealer;});players[index].isDealer=false;// increment current dealer index and set next player isDealer to true\nsetCurrDealer(currDealer+=1);if(currDealer>=players.length){onGameOver();var _newHand=calculateHand(currHand);setHandHistory([].concat(_toConsumableArray(handHistory),[_newHand]));return;}players[index+1].isDealer=true;}var newHand=calculateHand(currHand);setHandHistory([].concat(_toConsumableArray(handHistory),[newHand]));setCurrHand(populateHands());};// Calculates payouts for a round\nvar calculateHand=function calculateHand(hand){var newHand={handNum:currHandNum,results:[]};var results=[];var dealerWin=0;hand.map(function(player){if(player.status===\"win\"){results.push({playerID:player.playerID,result:player.bet,status:player.status});}else if(player.status===\"lose\"){results.push({playerID:player.playerID,result:player.bet*-1,status:player.status});}else if(player.status===\"push\"){results.push({playerID:player.playerID,result:0,status:player.status});}else{results.push({playerID:player.playerID,result:0,status:player.status});}});results.map(function(result){return dealerWin+=result.result*-1;});var index=hand.findIndex(function(_ref3){var status=_ref3.status;return status===\"dealer\";});results[index].result=dealerWin;// update player state to reflect new earnings\nplayers.map(function(player){results.map(function(result){if(player.id===result.playerID){player.total+=result.result;}});});// update newhand with results\nnewHand.results=results;return newHand;};// Adds a player's bet and status to the current hand; updates player's hand if reentered\nvar setBet=function setBet(_ref4){var playerID=_ref4.playerID,value=_ref4.value,status=_ref4.status;currHand[playerID-1].handNum=currHandNum;currHand[playerID-1].bet=value;currHand[playerID-1].status=status;setCurrHand(_toConsumableArray(currHand));};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\" Each player deals \",rounds,\" hand\",rounds>1?\"s\":\"\",\" for a total of \",totalRounds,\" hands. \"]}),/*#__PURE__*/_jsx(\"p\",{children:\" NOTE: If you split, please enter your *net* bet, otherwise enter total amount bet as a positive integer. \"}),/*#__PURE__*/_jsx(\"p\",{children:\" (ex: Player bets $5 and splits their hand; one hand busts and the other pushes. Net loss: $5) \"}),/*#__PURE__*/_jsxs(TableContainer,{sx:{my:2},children:[/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsxs(TableCell,{width:\"20%\",children:[/*#__PURE__*/_jsx(Grid,{children:/*#__PURE__*/_jsxs(\"h4\",{children:[\"Playing Hand #\",currHandNum+1,\" \"]})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:submitHand,children:\" Submit Hand \"})]}),players.map(function(player){return/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(RainierHandInput,{handNum:currHandNum,playerID:player.id,setBet:setBet,isDealer:player.isDealer,playerName:player.name})});})]}),/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{}),players.map(function(player){return/*#__PURE__*/_jsx(TableCell,{children:player.name});})]})}),/*#__PURE__*/_jsxs(TableBody,{children:[/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{width:\"20%\",children:\" Total: \"}),players.map(function(player){return/*#__PURE__*/_jsxs(TableCell,{style:{backgroundColor:player.total>=0?\"#C8F79E\":\"#F89693\"},children:[\" $\",player.total,\" \"]});})]}),handHistory.map(function(round){return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsxs(TableCell,{children:[\" Round \",round.handNum,\" \"]}),round.results.map(function(result){return/*#__PURE__*/_jsxs(TableCell,{children:[\" $\",result.result,\" \"]});})]});})]})]})]})]});};export default RainierPlayTable;","map":{"version":3,"sources":["C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/src/components/RainierPlayTable.js"],"names":["useState","Button","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","RainierHandInput","RainierPlayTable","players","rounds","onGameOver","handHistory","setHandHistory","currHandNum","setCurrHandNum","currDealer","setCurrDealer","populateHands","currHand","setCurrHand","hands","forEach","player","push","handNum","playerID","id","bet","status","totalRounds","length","submitHand","i","alert","index","findIndex","isDealer","newHand","calculateHand","hand","results","dealerWin","map","result","total","setBet","value","my","name","backgroundColor","round"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\r\nimport RainierHandInput from \"./RainierHandInput\"\r\n\r\nconst RainierPlayTable = ({ players, rounds, onGameOver }) => {\r\n    // Track history of hands\r\n    const [handHistory, setHandHistory] = useState([])\r\n\r\n    // Track the round number of the current hand\r\n    let [currHandNum, setCurrHandNum] = useState(0)\r\n\r\n    // Track current dealer; indexes players list to set isDealer boolean\r\n    let [currDealer, setCurrDealer] = useState(0)\r\n\r\n    // Store the results of the current hand\r\n    const [currHand, setCurrHand] = useState(populateHands())\r\n\r\n    // Populate currHand based on number players and their IDs\r\n    function populateHands() {\r\n        let hands = []\r\n        players.forEach(player =>\r\n            hands.push({ handNum: currHandNum, playerID: player.id, bet: 0, status: null }))\r\n        return hands\r\n    }\r\n\r\n    // Track number of rounds\r\n    let totalRounds\r\n    if (players) {\r\n        totalRounds = rounds * players.length\r\n    }\r\n\r\n    // Updates totals with previous current hand\r\n    const submitHand = () => {\r\n        // Check to make sure all players have submitted\r\n        for (let i = 0; i < currHand.length; i++) {\r\n            if (!currHand[i].bet) {\r\n                alert(\"Please make sure all player bets are submitted!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        setCurrHandNum(currHandNum += 1)\r\n\r\n        if (currHandNum % rounds === 0) {\r\n            // find current dealer and set to false\r\n            let index = players.findIndex(({ isDealer }) => isDealer)\r\n            players[index].isDealer = false\r\n            // increment current dealer index and set next player isDealer to true\r\n            setCurrDealer(currDealer += 1)\r\n\r\n            if (currDealer >= players.length) {\r\n                onGameOver()\r\n                const newHand = calculateHand(currHand)\r\n                setHandHistory([...handHistory, newHand])\r\n                return\r\n            }\r\n\r\n            players[index + 1].isDealer = true\r\n        }\r\n\r\n        const newHand = calculateHand(currHand)\r\n        setHandHistory([...handHistory, newHand])\r\n        setCurrHand(populateHands())\r\n    }\r\n\r\n    // Calculates payouts for a round\r\n    const calculateHand = (hand) => {\r\n        let newHand = { handNum: currHandNum, results: [] }\r\n        let results = []\r\n        let dealerWin = 0\r\n\r\n        hand.map(player => {\r\n            if (player.status === \"win\") {\r\n                results.push({ playerID: player.playerID, result: player.bet, status: player.status })\r\n            } else if (player.status === \"lose\") {\r\n                results.push({ playerID: player.playerID, result: player.bet * -1, status: player.status })\r\n            } else if (player.status === \"push\") {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            } else {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            }\r\n        })\r\n\r\n        results.map(result => (\r\n            dealerWin += result.result * -1\r\n        ))\r\n\r\n        let index = hand.findIndex(({ status }) => status === \"dealer\")\r\n        results[index].result = dealerWin\r\n\r\n        // update player state to reflect new earnings\r\n        players.map(player => {\r\n            results.map(result => {\r\n                if (player.id === result.playerID) {\r\n                    player.total += result.result\r\n                }\r\n            })\r\n        })\r\n\r\n        // update newhand with results\r\n        newHand.results = results\r\n        return newHand\r\n    }\r\n\r\n    // Adds a player's bet and status to the current hand; updates player's hand if reentered\r\n    const setBet = ({ playerID, value, status }) => {\r\n\r\n        currHand[playerID - 1].handNum = currHandNum\r\n        currHand[playerID - 1].bet = value\r\n        currHand[playerID - 1].status = status\r\n\r\n        setCurrHand([...currHand])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p> Each player deals {rounds} hand{(rounds > 1) ? \"s\" : \"\"} for a total of {totalRounds} hands. </p>\r\n            <p> NOTE: If you split, please enter your *net* bet, otherwise enter total amount bet as a positive integer. </p>\r\n            <p> (ex: Player bets $5 and splits their hand; one hand busts and the other pushes. Net loss: $5) </p>\r\n\r\n            <TableContainer sx={{ my: 2 }}>\r\n                {/* Player Input */}\r\n                <TableRow>\r\n                    <TableCell width=\"20%\">\r\n                        <Grid>\r\n                            <h4>Playing Hand #{currHandNum + 1} </h4>\r\n                        </Grid>\r\n                        <Button variant=\"contained\" onClick={submitHand}> Submit Hand </Button>\r\n                    </TableCell>\r\n                    {players.map((player) => (\r\n                        <TableCell>\r\n                            <RainierHandInput handNum={currHandNum} playerID={player.id} setBet={setBet} isDealer={player.isDealer} playerName={player.name}/>\r\n                        </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n                <Table>\r\n                    {/* Header with player names */}\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell>{player.name}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/* Player Totals Row */}\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n\r\n                        {/* Hand history */}\r\n                        {handHistory.map((round) => (\r\n                            <TableRow>\r\n                                <TableCell> Round {round.handNum} </TableCell>\r\n                                {round.results.map((result) => (\r\n                                    <TableCell> ${result.result} </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RainierPlayTable\r\n"]},"metadata":{},"sourceType":"module"}