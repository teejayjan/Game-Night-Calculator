{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjjan\\\\Documents\\\\GitHub\\\\Game-Night-Calculator\\\\src\\\\components\\\\PayoutResults.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PayoutResults = ({\n  players,\n  onNewGame\n}) => {\n  _s();\n\n  const [displayPayout, setDisplayPayout] = useState();\n  const [startNewGame, setStartNewGame] = useState(false);\n  const [playerRecord, setPlayerRecord] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  const calculatePayouts = () => {\n    let positives = [];\n    let negatives = [];\n    players.map(player => {\n      if (player.total >= 0) {\n        positives.push({\n          name: player.name,\n          total: player.total\n        });\n      } else {\n        negatives.push({\n          name: player.name,\n          total: player.total\n        });\n      }\n    }); // Sort all ascending by total\n\n    positives.sort(function (a, b) {\n      return a.total - b.total;\n    });\n    negatives.sort(function (a, b) {\n      return -(a.total - b.total);\n    });\n    setDisplayPayout(generatePayoutMessages(positives, negatives));\n    setStartNewGame(true);\n  };\n\n  const generatePayoutMessages = (positives, negatives) => {\n    let messages = []; // index positives\n\n    let i = 0; // index negatives \n\n    let j = 0;\n\n    while (i < positives.length && j < negatives.length) {\n      // totals placeholders\n      let pos = positives[i].total;\n      let neg = negatives[j].total; // get what is owed by positive player to corresponding negative player\n      // retrieves the lesser value of the two to account for players with larger negative or positive values\n\n      let owe = Math.min(Math.abs(pos), Math.abs(neg)); // update positive total\n\n      positives[i].total -= owe; // update negative total\n\n      negatives[j].total += owe; // generate payout message\n\n      let message = {\n        payer: negatives[j].name,\n        payee: positives[i].name,\n        amount: owe\n      }; // add payout message to messages\n\n      messages.push(message); // increment counters if either is zeroed\n\n      if (positives[i].total === 0) {\n        i++;\n      }\n\n      if (negatives[j].total === 0) {\n        j++;\n      }\n    }\n\n    return messages;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Results: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        my: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [\" \", player.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              width: \"20%\",\n              children: \" Total: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: player.total >= 0 ? \"#C8F79E\" : \"#F89693\"\n              },\n              children: [\" $\", player.total, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), !startNewGame && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: calculatePayouts,\n      children: \" Calculate Payouts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 31\n    }, this), displayPayout && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: displayPayout.map(payout => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: `${payout.payer} owes ${payout.payee}: $${payout.amount}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        sx: {\n          my: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: onNewGame,\n          children: \" Start a new Rainier Blackjack Game \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(PayoutResults, \"iGzSgaAR4IJWkp6TOHKTCc0oxyg=\");\n\n_c = PayoutResults;\nexport default PayoutResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PayoutResults\");","map":{"version":3,"sources":["C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/src/components/PayoutResults.js"],"names":["useState","Button","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","FormControl","InputLabel","MenuItem","Select","TextField","PayoutResults","players","onNewGame","displayPayout","setDisplayPayout","startNewGame","setStartNewGame","playerRecord","setPlayerRecord","name","setName","calculatePayouts","positives","negatives","map","player","total","push","sort","a","b","generatePayoutMessages","messages","i","j","length","pos","neg","owe","Math","min","abs","message","payer","payee","amount","my","backgroundColor","payout"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\r\n\r\nconst PayoutResults = ({ players, onNewGame }) => {\r\n    const [displayPayout, setDisplayPayout] = useState()\r\n    const [startNewGame, setStartNewGame] = useState(false)\r\n    const [playerRecord, setPlayerRecord] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const calculatePayouts = () => {\r\n        let positives = []\r\n        let negatives = []\r\n\r\n        players.map((player) => {\r\n            if (player.total >= 0) {\r\n                positives.push({ name: player.name, total: player.total })\r\n            } else {\r\n                negatives.push({ name: player.name, total: player.total })\r\n            }\r\n        })\r\n\r\n        // Sort all ascending by total\r\n        positives.sort(function (a, b) {\r\n            return (a.total - b.total)\r\n        })\r\n\r\n        negatives.sort(function (a, b) {\r\n            return - (a.total - b.total)\r\n        })\r\n\r\n        setDisplayPayout(generatePayoutMessages(positives, negatives))\r\n        setStartNewGame(true)\r\n    }\r\n\r\n    const generatePayoutMessages = (positives, negatives) => {\r\n        let messages = []\r\n\r\n        // index positives\r\n        let i = 0\r\n\r\n        // index negatives \r\n        let j = 0\r\n\r\n        while ((i < positives.length) && (j < negatives.length)) {\r\n            // totals placeholders\r\n            let pos = positives[i].total\r\n            let neg = negatives[j].total\r\n\r\n            // get what is owed by positive player to corresponding negative player\r\n            // retrieves the lesser value of the two to account for players with larger negative or positive values\r\n            let owe = Math.min(Math.abs(pos), Math.abs(neg))\r\n\r\n            // update positive total\r\n            positives[i].total -= owe\r\n\r\n            // update negative total\r\n            negatives[j].total += owe\r\n\r\n            // generate payout message\r\n            let message = { payer: negatives[j].name, payee: positives[i].name, amount: owe }\r\n\r\n            // add payout message to messages\r\n            messages.push(message)\r\n\r\n            // increment counters if either is zeroed\r\n            if (positives[i].total === 0) {\r\n                i++\r\n            }\r\n\r\n            if (negatives[j].total === 0) {\r\n                j++\r\n            }\r\n        }\r\n        return messages\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Final Results: </h1>\r\n            <TableContainer sx={{ my: 2 }}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell> {player.name} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            {/* Calculate Payouts */}\r\n            {!startNewGame && <Button variant=\"contained\" onClick={calculatePayouts}> Calculate Payouts </Button>}\r\n\r\n            {displayPayout && <>\r\n                {/*  Display Payouts */}\r\n                <TableContainer>\r\n                    <Table>\r\n                        {displayPayout.map((payout) => (\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {`${payout.payer} owes ${payout.payee}: $${payout.amount}`}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </Table>\r\n                </TableContainer>\r\n                <Grid sx={{ my: 2 }}>\r\n                    <Button variant=\"contained\" onClick={onNewGame}> Start a new Rainier Blackjack Game </Button>\r\n                </Grid>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PayoutResults\r\n"]},"metadata":{},"sourceType":"module"}