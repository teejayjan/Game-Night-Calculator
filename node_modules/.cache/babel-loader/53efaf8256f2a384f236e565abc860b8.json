{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tjjan\\\\Documents\\\\GitHub\\\\Game-Night-Calculator\\\\src\\\\components\\\\PayoutResults.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PayoutResults = ({\n  players,\n  onNewGame\n}) => {\n  _s();\n\n  const baseURL = \"http://localhost:9000/convert/\";\n  const backupURL = \"http://localhost:7777/users\";\n  const [displayPayout, setDisplayPayout] = useState();\n  const [startNewGame, setStartNewGame] = useState(false);\n  const [currCurrency, setCurrCurrency] = useState(\"usd\");\n  const [targetCurrency, setTargetCurency] = useState(\"usd\");\n  const [currencyPrefix, setCurrencyPrefix] = useState(\"$\");\n  const [playerRecord, setPlayerRecord] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  const calculatePayouts = () => {\n    let positives = [];\n    let negatives = [];\n    players.map(player => {\n      if (player.total >= 0) {\n        positives.push({\n          name: player.name,\n          total: player.total\n        });\n      } else {\n        negatives.push({\n          name: player.name,\n          total: player.total\n        });\n      }\n    }); // Sort all ascending by total\n\n    positives.sort(function (a, b) {\n      return a.total - b.total;\n    });\n    negatives.sort(function (a, b) {\n      return -(a.total - b.total);\n    });\n    setDisplayPayout(generatePayoutMessages(positives, negatives));\n    setStartNewGame(true);\n    backupGame();\n  };\n\n  const generatePayoutMessages = (positives, negatives) => {\n    let messages = []; // index positives\n\n    let i = 0; // index negatives \n\n    let j = 0;\n\n    while (i < positives.length && j < negatives.length) {\n      // totals placeholders\n      let pos = positives[i].total;\n      let neg = negatives[j].total; // get what is owed by positive player to corresponding negative player\n      // retrieves the lesser value of the two to account for players with larger negative or positive values\n\n      let owe = Math.min(Math.abs(pos), Math.abs(neg)); // update positive total\n\n      positives[i].total -= owe; // update negative total\n\n      negatives[j].total += owe; // generate payout message\n\n      let message = {\n        payer: negatives[j].name,\n        payee: positives[i].name,\n        amount: owe\n      }; // add payout message to messages\n\n      messages.push(message); // increment counters if either is zeroed\n\n      if (positives[i].total === 0) {\n        i++;\n      }\n\n      if (negatives[j].total === 0) {\n        j++;\n      }\n    }\n\n    return messages;\n  }; // sends get request to currency converter service\n\n\n  const convertCurrency = e => {\n    e.preventDefault();\n\n    if (currCurrency === targetCurrency) {\n      alert(\"cannot convert between the same currencies\");\n      return;\n    }\n\n    displayPayout.map(async payouts => {\n      const response = await fetch(baseURL + `${currCurrency}/${targetCurrency}/${payouts.amount}`);\n      payouts.amount = await response.json();\n      setDisplayPayout([...displayPayout]);\n    });\n    const prefixes = {\n      \"usd\": \"$\",\n      \"cad\": \"$\",\n      \"euro\": \"\\u20AC\",\n      \"jpy\": \"\\u00A5\",\n      \"gbp\": \"\\u00A3\"\n    };\n    setCurrCurrency(targetCurrency);\n    setCurrencyPrefix(prefixes[targetCurrency]);\n  }; // send game data to database for backup\n\n\n  function backupGame() {\n    axios({\n      method: \"PUT\",\n      url: `${backupURL}/${players[0].name}`,\n      headers: {\n        \"Accept\": \"application/json\"\n      },\n      data: {\n        \"players\": players\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // get a user's record\n\n\n  function lookupRecord() {\n    axios({\n      method: \"GET\",\n      url: `${backupURL}/${name}`\n    }).then(function (response) {\n      const record = `${response.data._id} has a lifetime total of $${response.data.total}`;\n      setPlayerRecord(record);\n    }).catch(function (error) {\n      setPlayerRecord(\"Player record doesn't exist.\");\n    });\n  } // delete all from database!\n\n\n  function deleteRecords() {\n    axios({\n      method: \"DELETE\",\n      url: backupURL\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Results: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        my: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [\" \", player.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              width: \"20%\",\n              children: \" Total: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this), players.map(player => /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: player.total >= 0 ? \"#C8F79E\" : \"#F89693\"\n              },\n              children: [\" $\", player.total, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), !startNewGame && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: calculatePayouts,\n      children: \" Calculate Payouts \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 31\n    }, this), displayPayout && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: displayPayout.map(payout => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              children: `${payout.payer} owes ${payout.payee}: ${currencyPrefix}${payout.amount}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        sx: {\n          my: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: onNewGame,\n          children: \" Start a new Rainier Blackjack Game \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Currency Converter \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \" Currencies \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: targetCurrency,\n              label: \"Currency\",\n              onChange: e => setTargetCurency(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"usd\",\n                children: \" US Dollar \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"cad\",\n                children: \" Canadian Dollar \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"euro\",\n                children: \" Euro \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"jpy\",\n                children: \" Japenese Yen \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"gbp\",\n                children: \" Great Britain Pound \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sx: {\n            my: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: convertCurrency,\n            children: [\" Convert to \", targetCurrency, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Player histories \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Search for a player \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Please note: player names are case-sensitive \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            label: \"Player Name\",\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sx: {\n            my: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: lookupRecord,\n            children: [\" Search \", name ? `for ${name}` : \"\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), playerRecord && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: playerRecord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Delete all player records \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: deleteRecords,\n        children: \" Delete Player Histories \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(PayoutResults, \"JUhxIdC1OBmjqMSdRJqeskUj18c=\");\n\n_c = PayoutResults;\nexport default PayoutResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PayoutResults\");","map":{"version":3,"sources":["C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/src/components/PayoutResults.js"],"names":["useState","axios","Button","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","FormControl","InputLabel","MenuItem","Select","TextField","PayoutResults","players","onNewGame","baseURL","backupURL","displayPayout","setDisplayPayout","startNewGame","setStartNewGame","currCurrency","setCurrCurrency","targetCurrency","setTargetCurency","currencyPrefix","setCurrencyPrefix","playerRecord","setPlayerRecord","name","setName","calculatePayouts","positives","negatives","map","player","total","push","sort","a","b","generatePayoutMessages","backupGame","messages","i","j","length","pos","neg","owe","Math","min","abs","message","payer","payee","amount","convertCurrency","e","preventDefault","alert","payouts","response","fetch","json","prefixes","method","url","headers","data","catch","error","console","log","lookupRecord","then","record","_id","deleteRecords","my","backgroundColor","payout","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport axios from \"axios\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\r\n\r\nconst PayoutResults = ({ players, onNewGame }) => {\r\n    const baseURL = \"http://localhost:9000/convert/\"\r\n    const backupURL = \"http://localhost:7777/users\"\r\n    const [displayPayout, setDisplayPayout] = useState()\r\n    const [startNewGame, setStartNewGame] = useState(false)\r\n    const [currCurrency, setCurrCurrency] = useState(\"usd\")\r\n    const [targetCurrency, setTargetCurency] = useState(\"usd\")\r\n    const [currencyPrefix, setCurrencyPrefix] = useState(\"$\")\r\n    const [playerRecord, setPlayerRecord] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const calculatePayouts = () => {\r\n        let positives = []\r\n        let negatives = []\r\n\r\n        players.map((player) => {\r\n            if (player.total >= 0) {\r\n                positives.push({ name: player.name, total: player.total })\r\n            } else {\r\n                negatives.push({ name: player.name, total: player.total })\r\n            }\r\n        })\r\n\r\n        // Sort all ascending by total\r\n        positives.sort(function (a, b) {\r\n            return (a.total - b.total)\r\n        })\r\n\r\n        negatives.sort(function (a, b) {\r\n            return - (a.total - b.total)\r\n        })\r\n\r\n        setDisplayPayout(generatePayoutMessages(positives, negatives))\r\n        setStartNewGame(true)\r\n        backupGame()\r\n    }\r\n\r\n    const generatePayoutMessages = (positives, negatives) => {\r\n        let messages = []\r\n\r\n        // index positives\r\n        let i = 0\r\n\r\n        // index negatives \r\n        let j = 0\r\n\r\n        while ((i < positives.length) && (j < negatives.length)) {\r\n            // totals placeholders\r\n            let pos = positives[i].total\r\n            let neg = negatives[j].total\r\n\r\n            // get what is owed by positive player to corresponding negative player\r\n            // retrieves the lesser value of the two to account for players with larger negative or positive values\r\n            let owe = Math.min(Math.abs(pos), Math.abs(neg))\r\n\r\n            // update positive total\r\n            positives[i].total -= owe\r\n\r\n            // update negative total\r\n            negatives[j].total += owe\r\n\r\n            // generate payout message\r\n            let message = { payer: negatives[j].name, payee: positives[i].name, amount: owe }\r\n\r\n            // add payout message to messages\r\n            messages.push(message)\r\n\r\n            // increment counters if either is zeroed\r\n            if (positives[i].total === 0) {\r\n                i++\r\n            }\r\n\r\n            if (negatives[j].total === 0) {\r\n                j++\r\n            }\r\n        }\r\n        return messages\r\n    }\r\n\r\n\r\n    // sends get request to currency converter service\r\n    const convertCurrency = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (currCurrency === targetCurrency) {\r\n            alert(\"cannot convert between the same currencies\")\r\n            return\r\n        }\r\n\r\n        displayPayout.map(async (payouts) => {\r\n            const response = await fetch(baseURL + `${currCurrency}/${targetCurrency}/${payouts.amount}`)\r\n            payouts.amount = await response.json()\r\n            setDisplayPayout([...displayPayout])\r\n        })\r\n\r\n        const prefixes = {\r\n            \"usd\": \"$\",\r\n            \"cad\": \"$\",\r\n            \"euro\": \"\\u20AC\",\r\n            \"jpy\": \"\\u00A5\",\r\n            \"gbp\": \"\\u00A3\"\r\n        }\r\n\r\n        setCurrCurrency(targetCurrency)\r\n        setCurrencyPrefix(prefixes[targetCurrency])\r\n    }\r\n\r\n    // send game data to database for backup\r\n    function backupGame() {\r\n        axios({\r\n            method: \"PUT\",\r\n            url: `${backupURL}/${players[0].name}`,\r\n            headers: {\r\n                \"Accept\": \"application/json\"\r\n            },\r\n            data: { \"players\": players }\r\n        })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // get a user's record\r\n    function lookupRecord() {\r\n        axios({\r\n            method: \"GET\",\r\n            url: `${backupURL}/${name}`,\r\n        })\r\n            .then(function (response) {\r\n                const record = `${response.data._id} has a lifetime total of $${response.data.total}`\r\n                setPlayerRecord(record)\r\n            })\r\n            .catch(function (error) {\r\n                setPlayerRecord(\"Player record doesn't exist.\")\r\n            })\r\n    }\r\n\r\n    // delete all from database!\r\n    function deleteRecords() {\r\n        axios({\r\n            method: \"DELETE\",\r\n            url: backupURL\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Final Results: </h1>\r\n            <TableContainer sx={{ my: 2 }}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell> {player.name} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            {/* Calculate Payouts */}\r\n            {!startNewGame && <Button variant=\"contained\" onClick={calculatePayouts}> Calculate Payouts </Button>}\r\n\r\n            {displayPayout && <>\r\n                {/*  Display Payouts */}\r\n                <TableContainer>\r\n                    <Table>\r\n                        {displayPayout.map((payout) => (\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {`${payout.payer} owes ${payout.payee}: ${currencyPrefix}${payout.amount}`}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </Table>\r\n                </TableContainer>\r\n                <Grid sx={{ my: 2 }}>\r\n                    <Button variant=\"contained\" onClick={onNewGame}> Start a new Rainier Blackjack Game </Button>\r\n                </Grid>\r\n\r\n                {/* Currency Convertor */}\r\n                <h2> Currency Converter </h2>\r\n                <Grid>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <InputLabel> Currencies </InputLabel>\r\n                            <Select\r\n                                value={targetCurrency}\r\n                                label=\"Currency\"\r\n                                onChange={(e) => setTargetCurency(e.target.value)}>\r\n                                <MenuItem value={\"usd\"}> US Dollar </MenuItem>\r\n                                <MenuItem value={\"cad\"}> Canadian Dollar </MenuItem>\r\n                                <MenuItem value={\"euro\"}> Euro </MenuItem>\r\n                                <MenuItem value={\"jpy\"}> Japenese Yen </MenuItem>\r\n                                <MenuItem value={\"gbp\"}> Great Britain Pound </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item sx={{ my: 2 }}>\r\n                        <Button variant=\"contained\" onClick={convertCurrency}> Convert to {targetCurrency} </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* Player history */}\r\n                <h2> Player histories </h2>\r\n                <h3> Search for a player </h3>\r\n                <p> Please note: player names are case-sensitive </p>\r\n                <Grid>\r\n                    <Grid item>\r\n                        <TextField variant=\"outlined\" label=\"Player Name\" onChange={(e) => setName(e.target.value)} />\r\n                    </Grid>\r\n                    <Grid item sx={{ my: 2 }}>\r\n                        <Button variant=\"contained\" onClick={lookupRecord}> Search {name ? `for ${name}` : \"\"} </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {playerRecord && <p>{playerRecord}</p>}\r\n\r\n                <h3> Delete all player records </h3>\r\n                <Button variant=\"contained\" onClick={deleteRecords}> Delete Player Histories </Button>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PayoutResults\r\n"]},"metadata":{},"sourceType":"module"}