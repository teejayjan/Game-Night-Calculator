{"ast":null,"code":"import _slicedToArray from\"C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{Button,Grid,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,FormControl,InputLabel,MenuItem,Select,TextField}from\"@mui/material\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var PayoutResults=function PayoutResults(_ref){var players=_ref.players,onNewGame=_ref.onNewGame;var _useState=useState(),_useState2=_slicedToArray(_useState,2),displayPayout=_useState2[0],setDisplayPayout=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),startNewGame=_useState4[0],setStartNewGame=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),playerRecord=_useState6[0],setPlayerRecord=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),name=_useState8[0],setName=_useState8[1];var calculatePayouts=function calculatePayouts(){var positives=[];var negatives=[];players.map(function(player){if(player.total>=0){positives.push({name:player.name,total:player.total});}else{negatives.push({name:player.name,total:player.total});}});// Sort all ascending by total\npositives.sort(function(a,b){return a.total-b.total;});negatives.sort(function(a,b){return-(a.total-b.total);});setDisplayPayout(generatePayoutMessages(positives,negatives));setStartNewGame(true);};var generatePayoutMessages=function generatePayoutMessages(positives,negatives){var messages=[];// index positives\nvar i=0;// index negatives \nvar j=0;while(i<positives.length&&j<negatives.length){// totals placeholders\nvar pos=positives[i].total;var neg=negatives[j].total;// get what is owed by positive player to corresponding negative player\n// retrieves the lesser value of the two to account for players with larger negative or positive values\nvar owe=Math.min(Math.abs(pos),Math.abs(neg));// update positive total\npositives[i].total-=owe;// update negative total\nnegatives[j].total+=owe;// generate payout message\nvar message={payer:negatives[j].name,payee:positives[i].name,amount:owe};// add payout message to messages\nmessages.push(message);// increment counters if either is zeroed\nif(positives[i].total===0){i++;}if(negatives[j].total===0){j++;}}return messages;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Final Results: \"}),/*#__PURE__*/_jsx(TableContainer,{sx:{my:2},children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{}),players.map(function(player){return/*#__PURE__*/_jsxs(TableCell,{children:[\" \",player.name,\" \"]});})]})}),/*#__PURE__*/_jsx(TableBody,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{width:\"20%\",children:\" Total: \"}),players.map(function(player){return/*#__PURE__*/_jsxs(TableCell,{style:{backgroundColor:player.total>=0?\"#C8F79E\":\"#F89693\"},children:[\" $\",player.total,\" \"]});})]})})]})}),!startNewGame&&/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:calculatePayouts,children:\" Calculate Payouts \"}),displayPayout&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsx(Table,{children:displayPayout.map(function(payout){return/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{children:\"\".concat(payout.payer,\" owes \").concat(payout.payee,\": $\").concat(payout.amount)})});})})}),/*#__PURE__*/_jsx(Grid,{sx:{my:2},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:onNewGame,children:\" Start a new Rainier Blackjack Game \"})})]})]});};export default PayoutResults;","map":{"version":3,"sources":["C:/Users/tjjan/Documents/GitHub/Game-Night-Calculator/src/components/PayoutResults.js"],"names":["useState","Button","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","FormControl","InputLabel","MenuItem","Select","TextField","PayoutResults","players","onNewGame","displayPayout","setDisplayPayout","startNewGame","setStartNewGame","playerRecord","setPlayerRecord","name","setName","calculatePayouts","positives","negatives","map","player","total","push","sort","a","b","generatePayoutMessages","messages","i","j","length","pos","neg","owe","Math","min","abs","message","payer","payee","amount","my","backgroundColor","payout"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\r\n\r\nconst PayoutResults = ({ players, onNewGame }) => {\r\n    const [displayPayout, setDisplayPayout] = useState()\r\n    const [startNewGame, setStartNewGame] = useState(false)\r\n    const [playerRecord, setPlayerRecord] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const calculatePayouts = () => {\r\n        let positives = []\r\n        let negatives = []\r\n\r\n        players.map((player) => {\r\n            if (player.total >= 0) {\r\n                positives.push({ name: player.name, total: player.total })\r\n            } else {\r\n                negatives.push({ name: player.name, total: player.total })\r\n            }\r\n        })\r\n\r\n        // Sort all ascending by total\r\n        positives.sort(function (a, b) {\r\n            return (a.total - b.total)\r\n        })\r\n\r\n        negatives.sort(function (a, b) {\r\n            return - (a.total - b.total)\r\n        })\r\n\r\n        setDisplayPayout(generatePayoutMessages(positives, negatives))\r\n        setStartNewGame(true)\r\n    }\r\n\r\n    const generatePayoutMessages = (positives, negatives) => {\r\n        let messages = []\r\n\r\n        // index positives\r\n        let i = 0\r\n\r\n        // index negatives \r\n        let j = 0\r\n\r\n        while ((i < positives.length) && (j < negatives.length)) {\r\n            // totals placeholders\r\n            let pos = positives[i].total\r\n            let neg = negatives[j].total\r\n\r\n            // get what is owed by positive player to corresponding negative player\r\n            // retrieves the lesser value of the two to account for players with larger negative or positive values\r\n            let owe = Math.min(Math.abs(pos), Math.abs(neg))\r\n\r\n            // update positive total\r\n            positives[i].total -= owe\r\n\r\n            // update negative total\r\n            negatives[j].total += owe\r\n\r\n            // generate payout message\r\n            let message = { payer: negatives[j].name, payee: positives[i].name, amount: owe }\r\n\r\n            // add payout message to messages\r\n            messages.push(message)\r\n\r\n            // increment counters if either is zeroed\r\n            if (positives[i].total === 0) {\r\n                i++\r\n            }\r\n\r\n            if (negatives[j].total === 0) {\r\n                j++\r\n            }\r\n        }\r\n        return messages\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Final Results: </h1>\r\n            <TableContainer sx={{ my: 2 }}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell> {player.name} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            {/* Calculate Payouts */}\r\n            {!startNewGame && <Button variant=\"contained\" onClick={calculatePayouts}> Calculate Payouts </Button>}\r\n\r\n            {displayPayout && <>\r\n                {/*  Display Payouts */}\r\n                <TableContainer>\r\n                    <Table>\r\n                        {displayPayout.map((payout) => (\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {`${payout.payer} owes ${payout.payee}: $${payout.amount}`}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </Table>\r\n                </TableContainer>\r\n                <Grid sx={{ my: 2 }}>\r\n                    <Button variant=\"contained\" onClick={onNewGame}> Start a new Rainier Blackjack Game </Button>\r\n                </Grid>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PayoutResults\r\n"]},"metadata":{},"sourceType":"module"}