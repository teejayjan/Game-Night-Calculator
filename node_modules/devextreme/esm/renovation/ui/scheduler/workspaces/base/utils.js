/**
 * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/utils.js)
 * Version: 21.2.3
 * Build date: Thu Oct 28 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import dateUtils from "../../../../../core/utils/date";
import {
    getGroupCount
} from "../../../../../ui/scheduler/resources/utils";
import {
    isHorizontalGroupingApplied,
    isVerticalGroupingApplied
} from "../utils";
var DAY_MS = dateUtils.dateToMilliseconds("day");
var HOUR_MS = dateUtils.dateToMilliseconds("hour");
export var getTotalRowCount = (rowCount, groupOrientation, groups, isAllDayPanelVisible) => {
    var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);
    var groupCount = getGroupCount(groups);
    var totalRowCount = isVerticalGrouping ? rowCount * groupCount : rowCount;
    return isAllDayPanelVisible ? totalRowCount + groupCount : totalRowCount
};
export var getTotalCellCount = (cellCount, groupOrientation, groups) => {
    var isHorizontalGrouping = isHorizontalGroupingApplied(groups, groupOrientation);
    var groupCount = getGroupCount(groups);
    return isHorizontalGrouping ? cellCount * groupCount : cellCount
};
export var getRowCountWithAllDayRow = (rowCount, isAllDayPanelVisible) => isAllDayPanelVisible ? rowCount + 1 : rowCount;
export var getHiddenInterval = (hoursInterval, cellCountInDay) => {
    var visibleInterval = hoursInterval * cellCountInDay * HOUR_MS;
    return DAY_MS - visibleInterval
};
export var createCellElementMetaData = (tableRect, cellRect) => {
    var {
        bottom: bottom,
        height: height,
        left: left,
        right: right,
        top: top,
        width: width,
        x: x,
        y: y
    } = cellRect;
    return {
        right: right,
        bottom: bottom,
        left: left - tableRect.left,
        top: top - tableRect.top,
        width: width,
        height: height,
        x: x,
        y: y
    }
};
export var getDateForHeaderText = (_, date) => date;
