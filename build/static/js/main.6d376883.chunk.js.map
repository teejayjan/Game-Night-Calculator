{"version":3,"sources":["components/Rules.js","components/RainierHandInput.js","components/RainierPlayTable.js","components/PayoutResults.js","components/GameSetup.js","components/RainierBlackJack.js","components/Footer.js","App.js","index.js"],"names":["Rules","game","href","target","RainierHandInput","playerName","playerID","setBet","isDealer","useState","value","setValue","status","setStatus","onSubmit","e","preventDefault","Grid","TextField","style","width","size","type","variant","label","onChange","valueAsNumber","sx","my","Button","onClick","ButtonGroup","color","RainierPlayTable","totalRounds","players","rounds","onGameOver","handHistory","setHandHistory","currHandNum","setCurrHandNum","currDealer","setCurrDealer","populateHands","currHand","setCurrHand","hands","forEach","player","push","handNum","id","bet","length","calculateHand","hand","newHand","results","dealerWin","map","result","index","findIndex","total","TableContainer","TableRow","TableCell","i","alert","name","Table","TableHead","TableBody","backgroundColor","round","PayoutResults","onNewGame","displayPayout","setDisplayPayout","startNewGame","setStartNewGame","generatePayoutMessages","positives","negatives","messages","j","pos","neg","owe","Math","min","abs","message","payer","payee","amount","sort","a","b","payout","GameSetup","startGame","setPlayer","setPlayers","editPlayer","setEditPlayer","playerCount","setPlayerCount","setRounds","isEditing","setIsEditing","isConfirming","setIsConfirming","isAddingPlayers","setIsAddingPlayers","isAddingRounds","setIsAddingRounds","isStartReady","setIsStartReady","onConfirmPlayers","onSaveRounds","container","wrap","spacing","item","newPlayer","prevState","playerIndex","minWidth","background","row","component","scope","playerToEdit","filter","onEditPlayer","tempPlayerList","onDeletePlayer","RainierBlackJack","gameActive","setGameActive","gameOver","setGameOver","to","exact","Footer","App","history","useHistory","showRules","setShowRules","choice","setChoice","validateChoice","outerBox","mt","display","justifyContent","alignItems","bgcolor","overflow","borderRadius","boxShadow","innerBox","flexDirection","xs","md","m","path","Container","maxWidth","Box","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d376883.chunk.js","sourcesContent":["const Rules = ({ game }) => {\r\n    return (\r\n        <div>\r\n            <h1> {game} Rules</h1>\r\n            {game === \"Rainier Blackjack\" &&\r\n                <>\r\n                    <p> Rainier Blackjack is a variant of classic Blackjack without a static house. </p>\r\n                    <p> Click <a href=\"https://en.wikipedia.org/wiki/Blackjack\" target=\"_blank\"> here</a> for classic Blackjack rules.</p>\r\n                    <p> In Rainier Blackjack, players agree on a set number of rounds each player will deal before the game begins.\r\n                    Starting with the first player, each player takes turns dealing as the house.</p>\r\n                    <p> To begin the round, the house player declares their maximum bet. Each subsequent player\r\n                    then declares their personal bet up to the house player's amount. </p>\r\n                    <p> The round is played normally, along with splits, doubles, house Blackjack preemption, etc.</p>\r\n                    <p> After the round is complete, winnings are then calculated based on the house player's maximum bet\r\n                    and each player's individual bet:</p>\r\n                    <ul>\r\n                        <li> If a non-dealer player wins (i.e. beats the dealer or dealer busts), they are owed money \r\n                        <b> from the dealer </b> equaling that non-dealer player's bet.</li>\r\n                        <li> If a dealer player wins (i.e. beats a non-dealer player or non-dealer player busts), they \r\n                        are owed money <b> from the player </b> equaling that non-dealer player's bet. </li>\r\n                    </ul>\r\n                    <p> Bets after each round (negatives and positives) should add to zero. </p>\r\n\r\n                    <p> <b> Example 1: </b> Dealer bets $5, three non-dealer players match the bet at $5. The dealer reveals a blackjack,\r\n                    causing each non-dealer player to lose. The dealer player is now +$15 while each other player is -$5.</p> \r\n\r\n                    <p> <b> Example 2: </b> Dealer bets $20, three non-dealer players bet various amounts: $6, $13, $20. \r\n                    The dealer busts, causing each other non-dealer player to win. The dealer player is now -$39 while \r\n                    each other player is +$6, +$13, and +$20 respectively. </p> \r\n\r\n                    <p> <b> Example 3: </b> Dealer bets $10, three non-dealer players bet various amounts: $2, $5, $10. The dealer reveals \r\n                    an 18, causing the following to occur: Player 2 loses $2 with a 17; Player 3 loses $0 with a 17 and a\r\n                    19 split, Player 3 loses $0 on an 18 push. The dealer player is now +$2 while each other player is $-2, \r\n                    $0, and $0, respectively. </p>\r\n\r\n                </>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rules\r\n","import { useState } from \"react\"\r\nimport { TextField, Button, Grid, ButtonGroup } from \"@mui/material\"\r\n\r\nconst RainierHandInput = ({ playerName, playerID, setBet, isDealer }) => {\r\n    const [value, setValue] = useState()\r\n    const [status, setStatus] = useState()\r\n\r\n    const onSubmit = (e, status) => {\r\n        e.preventDefault()\r\n\r\n        setStatus(status)\r\n        setBet({ playerID, value, status })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid>\r\n                {isDealer && <h4> {playerName} is dealing{value && status ? `: $${value} House` : \"\"} </h4>}\r\n                {!isDealer && <h4> {playerName}'s bet{value && status ? `: $${value} ${status}` : \"\"} </h4>}\r\n            </Grid>\r\n            <Grid>\r\n                <TextField style={{ width: 100 }} size=\"small\" type=\"number\" variant=\"outlined\" label=\"Bet\" onChange={(e) => setValue(e.target.valueAsNumber)} />\r\n            </Grid>\r\n            <Grid sx={{ my: 2 }} >\r\n                {isDealer ?\r\n                    <> <Button size=\"small\" variant=\"contained\" onClick={(e) => { onSubmit(e, \"dealer\") }}> Confirm </Button> </>\r\n                    :\r\n                    <>\r\n                        <ButtonGroup>\r\n                            <Button size=\"small\" variant=\"contained\" color=\"success\" onClick={(e) => { onSubmit(e, \"win\") }}> Win </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup>\r\n                            <Button size=\"small\" variant=\"contained\" color=\"error\" onClick={(e) => { onSubmit(e, \"lose\") }}> Lose </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup>\r\n                            <Button size=\"small\" variant=\"contained\" color=\"warning\" onClick={(e) => { onSubmit(e, \"push\") }}> Push </Button>\r\n                        </ButtonGroup> </>}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RainierHandInput\r\n","import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\r\nimport RainierHandInput from \"./RainierHandInput\"\r\n\r\nconst RainierPlayTable = ({ players, rounds, onGameOver }) => {\r\n    // Track history of hands\r\n    const [handHistory, setHandHistory] = useState([])\r\n\r\n    // Track the round number of the current hand\r\n    let [currHandNum, setCurrHandNum] = useState(0)\r\n\r\n    // Track current dealer; indexes players list to set isDealer boolean\r\n    let [currDealer, setCurrDealer] = useState(0)\r\n\r\n    // Store the results of the current hand\r\n    const [currHand, setCurrHand] = useState(populateHands())\r\n\r\n    // Populate currHand based on number players and their IDs\r\n    function populateHands() {\r\n        let hands = []\r\n        players.forEach(player =>\r\n            hands.push({ handNum: currHandNum, playerID: player.id, bet: 0, status: null }))\r\n        return hands\r\n    }\r\n\r\n    // Track number of rounds\r\n    let totalRounds\r\n    if (players) {\r\n        totalRounds = rounds * players.length\r\n    }\r\n\r\n    // Updates totals with previous current hand\r\n    const submitHand = () => {\r\n        // Check to make sure all players have submitted\r\n        for (let i = 0; i < currHand.length; i++) {\r\n            if (!currHand[i].bet) {\r\n                alert(\"Please make sure all player bets are submitted!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        setCurrHandNum(currHandNum += 1)\r\n\r\n        if (currHandNum % rounds === 0) {\r\n            // find current dealer and set to false\r\n            let index = players.findIndex(({ isDealer }) => isDealer)\r\n            players[index].isDealer = false\r\n            // increment current dealer index and set next player isDealer to true\r\n            setCurrDealer(currDealer += 1)\r\n\r\n            if (currDealer >= players.length) {\r\n                onGameOver()\r\n                const newHand = calculateHand(currHand)\r\n                setHandHistory([...handHistory, newHand])\r\n                return\r\n            }\r\n\r\n            players[index + 1].isDealer = true\r\n        }\r\n\r\n        const newHand = calculateHand(currHand)\r\n        setHandHistory([...handHistory, newHand])\r\n        setCurrHand(populateHands())\r\n    }\r\n\r\n    // Calculates payouts for a round\r\n    const calculateHand = (hand) => {\r\n        let newHand = { handNum: currHandNum, results: [] }\r\n        let results = []\r\n        let dealerWin = 0\r\n\r\n        hand.map(player => {\r\n            if (player.status === \"win\") {\r\n                results.push({ playerID: player.playerID, result: player.bet, status: player.status })\r\n            } else if (player.status === \"lose\") {\r\n                results.push({ playerID: player.playerID, result: player.bet * -1, status: player.status })\r\n            } else if (player.status === \"push\") {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            } else {\r\n                results.push({ playerID: player.playerID, result: 0, status: player.status })\r\n            }\r\n        })\r\n\r\n        results.map(result => (\r\n            dealerWin += result.result * -1\r\n        ))\r\n\r\n        let index = hand.findIndex(({ status }) => status === \"dealer\")\r\n        results[index].result = dealerWin\r\n\r\n        // update player state to reflect new earnings\r\n        players.map(player => {\r\n            results.map(result => {\r\n                if (player.id === result.playerID) {\r\n                    player.total += result.result\r\n                }\r\n            })\r\n        })\r\n\r\n        // update newhand with results\r\n        newHand.results = results\r\n        return newHand\r\n    }\r\n\r\n    // Adds a player's bet and status to the current hand; updates player's hand if reentered\r\n    const setBet = ({ playerID, value, status }) => {\r\n\r\n        currHand[playerID - 1].handNum = currHandNum\r\n        currHand[playerID - 1].bet = value\r\n        currHand[playerID - 1].status = status\r\n\r\n        setCurrHand([...currHand])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p> Each player deals {rounds} hand{(rounds > 1) ? \"s\" : \"\"} for a total of {totalRounds} hands. </p>\r\n            <p> NOTE: If you split, please enter your *net* bet, otherwise enter total amount bet as a positive integer. </p>\r\n            <p> (ex: Player bets $5 and splits their hand; one hand busts and the other pushes. Net loss: $5) </p>\r\n\r\n            <TableContainer sx={{ my: 2 }}>\r\n                {/* Player Input */}\r\n                <TableRow>\r\n                    <TableCell width=\"20%\">\r\n                        <Grid>\r\n                            <h4>Playing Hand #{currHandNum + 1} </h4>\r\n                        </Grid>\r\n                        <Button variant=\"contained\" onClick={submitHand}> Submit Hand </Button>\r\n                    </TableCell>\r\n                    {players.map((player) => (\r\n                        <TableCell>\r\n                            <RainierHandInput handNum={currHandNum} playerID={player.id} setBet={setBet} isDealer={player.isDealer} playerName={player.name}/>\r\n                        </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n                <Table>\r\n                    {/* Header with player names */}\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell>{player.name}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/* Player Totals Row */}\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n\r\n                        {/* Hand history */}\r\n                        {handHistory.map((round) => (\r\n                            <TableRow>\r\n                                <TableCell> Round {round.handNum} </TableCell>\r\n                                {round.results.map((result) => (\r\n                                    <TableCell> ${result.result} </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RainierPlayTable\r\n","import { useState } from \"react\"\r\nimport { Button, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\r\n\r\nconst PayoutResults = ({ players, onNewGame }) => {\r\n    const [displayPayout, setDisplayPayout] = useState()\r\n    const [startNewGame, setStartNewGame] = useState(false)\r\n    const [playerRecord, setPlayerRecord] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const calculatePayouts = () => {\r\n        let positives = []\r\n        let negatives = []\r\n\r\n        players.map((player) => {\r\n            if (player.total >= 0) {\r\n                positives.push({ name: player.name, total: player.total })\r\n            } else {\r\n                negatives.push({ name: player.name, total: player.total })\r\n            }\r\n        })\r\n\r\n        // Sort all ascending by total\r\n        positives.sort(function (a, b) {\r\n            return (a.total - b.total)\r\n        })\r\n\r\n        negatives.sort(function (a, b) {\r\n            return - (a.total - b.total)\r\n        })\r\n\r\n        setDisplayPayout(generatePayoutMessages(positives, negatives))\r\n        setStartNewGame(true)\r\n    }\r\n\r\n    const generatePayoutMessages = (positives, negatives) => {\r\n        let messages = []\r\n\r\n        // index positives\r\n        let i = 0\r\n\r\n        // index negatives \r\n        let j = 0\r\n\r\n        while ((i < positives.length) && (j < negatives.length)) {\r\n            // totals placeholders\r\n            let pos = positives[i].total\r\n            let neg = negatives[j].total\r\n\r\n            // get what is owed by positive player to corresponding negative player\r\n            // retrieves the lesser value of the two to account for players with larger negative or positive values\r\n            let owe = Math.min(Math.abs(pos), Math.abs(neg))\r\n\r\n            // update positive total\r\n            positives[i].total -= owe\r\n\r\n            // update negative total\r\n            negatives[j].total += owe\r\n\r\n            // generate payout message\r\n            let message = { payer: negatives[j].name, payee: positives[i].name, amount: owe }\r\n\r\n            // add payout message to messages\r\n            messages.push(message)\r\n\r\n            // increment counters if either is zeroed\r\n            if (positives[i].total === 0) {\r\n                i++\r\n            }\r\n\r\n            if (negatives[j].total === 0) {\r\n                j++\r\n            }\r\n        }\r\n        return messages\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Final Results: </h1>\r\n            <TableContainer sx={{ my: 2 }}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell> {player.name} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell width=\"20%\"> Total: </TableCell>\r\n                            {players.map((player) => (\r\n                                <TableCell style={{ backgroundColor: (player.total >= 0) ? \"#C8F79E\" : \"#F89693\" }} > ${player.total} </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            {/* Calculate Payouts */}\r\n            {!startNewGame && <Button variant=\"contained\" onClick={calculatePayouts}> Calculate Payouts </Button>}\r\n\r\n            {displayPayout && <>\r\n                {/*  Display Payouts */}\r\n                <TableContainer>\r\n                    <Table>\r\n                        {displayPayout.map((payout) => (\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {`${payout.payer} owes ${payout.payee}: $${payout.amount}`}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </Table>\r\n                </TableContainer>\r\n                <Grid sx={{ my: 2 }}>\r\n                    <Button variant=\"contained\" onClick={onNewGame}> Start a new Rainier Blackjack Game </Button>\r\n                </Grid>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PayoutResults\r\n","import { useState } from \"react\";\r\nimport { Button, ButtonGroup, TextField, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\r\n\r\nconst GameSetup = ({ startGame }) => {\r\n    const [player, setPlayer] = useState()\r\n    const [players, setPlayers] = useState([])\r\n\r\n    const [editPlayer, setEditPlayer] = useState({})\r\n    let [playerCount, setPlayerCount] = useState(1)\r\n\r\n    const [rounds, setRounds] = useState()\r\n\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [isConfirming, setIsConfirming] = useState(false)\r\n    const [isAddingPlayers, setIsAddingPlayers] = useState(true)\r\n    const [isAddingRounds, setIsAddingRounds] = useState(false)\r\n    const [isStartReady, setIsStartReady] = useState(false)\r\n\r\n    // Handles adding of new player\r\n    const onNewPlayer = () => {\r\n        setPlayerCount(playerCount + 1)\r\n        let newPlayer = { id: playerCount, name: player, total: 0, isDealer: false }\r\n        setPlayers([...players, newPlayer])\r\n    }\r\n\r\n    // Handles editing player name\r\n    const onEditPlayer = (id) => {\r\n        const playerToEdit = players.filter(player => player.id === id)\r\n        setEditPlayer(playerToEdit[0])\r\n        setIsEditing(true)\r\n    }\r\n\r\n    const onSaveEdit = () => {\r\n        const playerIndex = players.findIndex((player => player.id === editPlayer.id))\r\n        players[playerIndex].name = editPlayer.name\r\n        setPlayers([...players])\r\n        setIsEditing(false)\r\n        setEditPlayer({})\r\n    }\r\n\r\n    // Handles deleting player\r\n    const onDeletePlayer = (id) => {\r\n        const tempPlayerList = players.filter((player) => player.id !== id)\r\n        for (let i = 0; i < tempPlayerList.length; i++)\r\n            tempPlayerList[i].id = i + 1\r\n        setPlayers(tempPlayerList)\r\n        setPlayerCount(playerCount - 1)\r\n    }\r\n\r\n    // Handles locking in player list\r\n    const onConfirmPlayers = () => {\r\n        if (!isConfirming) {\r\n            setIsConfirming(true)\r\n            return\r\n        }\r\n        setIsAddingPlayers(false)\r\n        setIsAddingRounds(true)\r\n        setIsConfirming(false)\r\n    }\r\n\r\n    // Handles submitting number of rounds per player\r\n    const onSaveRounds = () => {\r\n        if (!isConfirming) {\r\n            setIsConfirming(true)\r\n            return\r\n        }\r\n        setIsAddingRounds(false)\r\n        setIsStartReady(true)\r\n    }\r\n\r\n    const onStart = () => {\r\n        startGame({players, rounds})\r\n    }\r\n\r\n    const onReset = () => {\r\n        setPlayer()\r\n        setPlayers([])\r\n        setEditPlayer({})\r\n        setPlayerCount(1)\r\n        setRounds()\r\n        setIsEditing(false)\r\n        setIsConfirming(false)\r\n        setIsAddingPlayers(true)\r\n        setIsAddingRounds(false)\r\n        setIsStartReady(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Adding Players */}\r\n            {isAddingPlayers && <> <h3>Enter player names:</h3>\r\n                <Grid container wrap='nowrap' spacing={2} sx={{ width: 95 / 100 }}>\r\n                    <Grid item>\r\n                        <TextField label=\"Player\" variant=\"outlined\"\r\n                            onChange={(e) => setPlayer(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sx={{ my: 'auto' }}>\r\n                        <Button size=\"small\" variant=\"contained\" type=\"submit\" onClick={onNewPlayer}> Add Player </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {playerCount > 2 && <Grid container wrap='nowrap' spacing={2} sx={{ width: 95 / 100, my: 1 }}>\r\n                    {isConfirming\r\n                        ?\r\n                        <>\r\n                            <Grid item>\r\n                                <Button color=\"warning\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={onConfirmPlayers}> Yes, Confirm Players </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color=\"success\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={() => setIsConfirming(false)}> No, Go Back </Button>\r\n                            </Grid>\r\n                        </>\r\n                        :\r\n                        <Grid item>\r\n                            <Button color=\"success\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={onConfirmPlayers}> Confirm Players </Button>\r\n                        </Grid>}\r\n                </Grid>}\r\n            </>}\r\n\r\n            {/* Set Number of Rounds */}\r\n            {isAddingRounds && <> <h3>Enter number of times each player will deal:</h3>\r\n                <Grid container wrap='nowrap' spacing={2} sx={{ width: 95 / 100 }}>\r\n                    <Grid item>\r\n                        <TextField label=\"Rounds\" variant=\"outlined\"\r\n                            onChange={(e) => setRounds(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    {rounds && <Grid item sx={{ my: 'auto' }}>\r\n                        {isConfirming\r\n                            ?\r\n                            <ButtonGroup>\r\n                                <Button color=\"warning\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={onSaveRounds}> Yes, Confirm Rounds </Button>\r\n                                <Button color=\"success\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={() => setIsConfirming(false)}> No, Go Back </Button>\r\n                            </ButtonGroup>\r\n                            :\r\n                            <Button color=\"success\" size=\"small\" variant=\"contained\" type=\"submit\" onClick={onSaveRounds}> Confirm Rounds </Button>}\r\n                    </Grid>}\r\n                </Grid>\r\n            </>}\r\n\r\n            {/* Ready message and button */}\r\n            {isStartReady && <>\r\n                <h3>Ready to begin with {playerCount - 1} players dealing {rounds} hands each for a total of {(playerCount - 1) * rounds} hands?</h3>\r\n                <Grid container wrap='nowrap' spacing={2} sx={{ width: 95 / 100 }}>\r\n                    <Grid item>\r\n                        <Button color=\"success\" variant=\"contained\" type=\"submit\" onClick={onStart}> Start Game </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color=\"warning\" variant=\"contained\" type=\"submit\" onClick={onReset}> Redo Game Setup </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </>}\r\n\r\n            {/* Editing Dialogue Box */}\r\n            {isEditing && <>\r\n                <p>Editing {editPlayer.name} </p>\r\n                <Grid container spacing={2} sx={{ width: 95 / 100 }}>\r\n                    <Grid item>\r\n                        <TextField label=\"Player\" variant=\"outlined\"\r\n                            onChange={(e) => setEditPlayer(prevState => ({ ...prevState, name: e.target.value }))}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sx={{ my: 'auto' }}>\r\n                        <Button variant=\"contained\" type=\"submit\" onClick={onSaveEdit}> Update </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </>}\r\n\r\n            <TableContainer sx={{ my: 2 }}>\r\n                <Table sx={{ minWidth: 200 }}>\r\n                    <TableHead sx={isAddingPlayers ? \"\" : { background: 'rgba(76, 175, 80, 1)' }}>\r\n                        <TableRow>\r\n                            <TableCell> Number </TableCell>\r\n                            <TableCell> Player Name </TableCell>\r\n                            <TableCell></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {players.map((row) => (\r\n                            <TableRow\r\n                                key={row.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    Player {row.id}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {isAddingPlayers && <ButtonGroup size=\"small\">\r\n                                        <Button type=\"submit\" onClick={() => onEditPlayer(row.id)}> Edit </Button>\r\n                                        <Button type=\"submit\" onClick={() => onDeletePlayer(row.id)}> Delete </Button>\r\n                                    </ButtonGroup>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameSetup\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RainierPlayTable from \"./RainierPlayTable\";\r\nimport PayoutResults from \"./PayoutResults\";\r\nimport GameSetup from \"./GameSetup\";\r\n\r\n\r\nconst RainierBlackJack = () => {\r\n    const [players, setPlayers] = useState()\r\n    const [rounds, setRounds] = useState()\r\n\r\n    const [gameActive, setGameActive] = useState(false)\r\n    const [gameOver, setGameOver] = useState(false)\r\n\r\n    // Start Game\r\n    const onStart = ({ players, rounds }) => {\r\n        players[0].isDealer = true\r\n        setPlayers(players)\r\n        setRounds(rounds)\r\n        setGameActive(true)\r\n    }\r\n\r\n    // reset active game\r\n    const onReset = () => {\r\n        setPlayers()\r\n        setRounds()\r\n        setGameActive(false)\r\n        setGameOver(false)\r\n    }\r\n\r\n    // display results after end of game\r\n    const onGameOver = () => {\r\n        setGameOver(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/\" exact>Exit Game & Return to Main Menu</Link>\r\n            <h1>Rainier Blackjack</h1>\r\n\r\n            {!gameActive && !gameOver && <>\r\n                <GameSetup startGame={onStart} />\r\n            </>}\r\n\r\n            {gameActive && !gameOver && <>\r\n                <RainierPlayTable players={players} rounds={rounds} onGameOver={onGameOver} />\r\n            </>}\r\n\r\n            {gameOver && <>\r\n                <PayoutResults players={players} onNewGame={onReset} />\r\n            </>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RainierBlackJack\r\n","function Footer() {\r\n    return (\r\n        <>\r\n            <p>By <a href=\"https://github.com/teejayjan\">Timothy Jan</a></p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { Router, Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\"\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\nimport { Box, Button, ButtonGroup, Select, FormControl, InputLabel, MenuItem, Container } from \"@mui/material\";\r\nimport Rules from \"./components/Rules\";\r\nimport RainierBlackJack from \"./components/RainierBlackJack\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nfunction App() {\r\n    const history = useHistory();\r\n    const [showRules, setShowRules] = useState(false);\r\n    const [choice, setChoice] = useState(\"\")\r\n\r\n    // Display-safe titles for rules display\r\n    const gameTitles = {\r\n        \"rainier-blackjack\": \"Rainier Blackjack\"\r\n    }\r\n\r\n    // Handle showRules\r\n    const displayRules = () => {\r\n        // Don't change state of showRules if user chose an incorrect choice\r\n        if (validateChoice(choice))\r\n            return\r\n        setShowRules(!showRules)\r\n    }\r\n\r\n    // Handle startGame \r\n    const beginGame = () => {\r\n        // Don't change state of startGame if user chose an incorrect choice\r\n        if (validateChoice(choice)) {\r\n            return\r\n        }\r\n        history.push(\"/rainierblackjack\")\r\n    }\r\n\r\n    // Validate user choice\r\n    const validateChoice = (value) => {\r\n        if (value === \"\" || value === \"default\" || value === \"under-construction\") {\r\n            alert(\"Please select a valid option\")\r\n            return true\r\n        }\r\n    }\r\n\r\n    // Box configurations\r\n    const outerBox = {\r\n        mt: 5,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n        bgcolor: 'background.paper',\r\n        overflow: 'hidden',\r\n        borderRadius: '12px',\r\n        boxShadow: 10,\r\n    }\r\n\r\n    const innerBox = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: { xs: 'center', md: 'flex-start' },\r\n        m: 3,\r\n        minWidth: { md: 350 },\r\n    }\r\n\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                {/* Main Menu */}\r\n                <Route exact path=\"/\" >\r\n                    <Container maxWidth=\"sm\">\r\n                        <Box sx={outerBox}>\r\n                            <Box sx={innerBox}>\r\n                                <h1>Game Night Calculator</h1>\r\n                                <p>Please select a game and an option to continue:</p>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel id=\"gameSelect\"> Options </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"gameSelectLabel\"\r\n                                        id=\"gameSelect\"\r\n                                        value={choice}\r\n                                        label=\"Choice\"\r\n                                        onChange={(e) => setChoice(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={\"rainier-blackjack\"}> Rainier Blackjack </MenuItem>\r\n                                        <MenuItem value={\"under-construction\"}> Additional games under construction! </MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <ButtonGroup variant=\"contained\" sx={{ my: 2 }}>\r\n                                    <Button type=\"submit\" onClick={beginGame}> Start New Game </Button>\r\n                                    <Button type=\"submit\" onClick={displayRules}> {!showRules ? \"Display Rules\" : \"Hide Rules\"} </Button>\r\n                                </ButtonGroup>\r\n                                {showRules && <Rules game={gameTitles[choice]} />}\r\n                                <Footer/>\r\n                            </Box>\r\n                        </Box>\r\n                    </Container>\r\n                </Route>\r\n\r\n                {/* Rainier Blackjack Game Screen */}\r\n                <Container >\r\n                    <Box sx={outerBox}>\r\n                        <Box sx={innerBox}>\r\n                            <Route exact path=\"/rainierblackjack\">\r\n                                <RainierBlackJack />\r\n                                <Footer/>\r\n                            </Route>\r\n                        </Box>\r\n                    </Box>\r\n                </Container>\r\n            </Switch>\r\n        </Router >\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}